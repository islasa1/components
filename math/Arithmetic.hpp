//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
//     _____    ____ _       ____ _        __ _      __ _  __ _  ______ _   ___ _   //
//    / /| |]  |  __ \\     / ___ \\      / \ \\    |   \\/   |]|  _____|] / ___|]  //
//   / //| |]  | |] \ \\   | |]  \_|]    / //\ \\   | |\ / /| |]| |]___ _ ( ((_ _   //
//  / //_| |]_ | |]  ) ))  | |]  __ _   / _____ \\  | |]\_/ | |]|  _____|] \___ \\  //
// |_____   _|]| |]_/ //   | |]__/  |] / //    \ \\ | |]    | |]| |]___ _   ___) )) //
//       |_|]  |_____//     \_____/|]]/_//      \_\\|_|]    |_|]|_______|] |____//  //
//                                                                                  //
//                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////
///
///
///  \File    : Arithmetic.hpp
///  \Author  : Anthony Islas
///  \Purpose : Holds basic math functions for arithmetic computations
///  \Group   : Math
///
///  \todo    : None
///
///  \License : GNU GPL v3
///
////////////////////////////////////////////////////////////////////////////////////

#ifndef __MATH_ARITHMETIC_H__
#define __MATH_ARITHMETIC_H__

namespace components
{

namespace math
{
  
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Functions /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
template< typename T > T gcd( T a, T b );
template< typename T > T lcm( T a, T b );


////////////////////////////////////////////////////////////////////////////////////
//
// Definitions for templates
//
////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T gcd( T a, T b )
{
    for ( ; ; )
    {
        if ( a == static_cast< T >( 0 ) ) return b;

        b %= a;

        if ( b == static_cast< T >( 0 ) ) return a;
        a %= b;
    }
}

template< typename T >
T lcm( T a, T b )
{
    T temp = gcd( a, b );

    return temp ? ( a / temp * b ) : static_cast< T >( 0 );
}

} // namespace math


} // namespace components

#endif // __MATH_ARITHMETIC_H__